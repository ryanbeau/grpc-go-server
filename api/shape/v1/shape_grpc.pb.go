// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shape

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShapeClient is the client API for Shape service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShapeClient interface {
	// TrianglePerimeter will calculate perimeter and return value.
	TrianglePerimeter(ctx context.Context, in *TrianglePerimeterRequest, opts ...grpc.CallOption) (*TrianglePerimeterResponse, error)
}

type shapeClient struct {
	cc grpc.ClientConnInterface
}

func NewShapeClient(cc grpc.ClientConnInterface) ShapeClient {
	return &shapeClient{cc}
}

func (c *shapeClient) TrianglePerimeter(ctx context.Context, in *TrianglePerimeterRequest, opts ...grpc.CallOption) (*TrianglePerimeterResponse, error) {
	out := new(TrianglePerimeterResponse)
	err := c.cc.Invoke(ctx, "/shape.v1.Shape/TrianglePerimeter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShapeServer is the server API for Shape service.
// All implementations must embed UnimplementedShapeServer
// for forward compatibility
type ShapeServer interface {
	// TrianglePerimeter will calculate perimeter and return value.
	TrianglePerimeter(context.Context, *TrianglePerimeterRequest) (*TrianglePerimeterResponse, error)
	mustEmbedUnimplementedShapeServer()
}

// UnimplementedShapeServer must be embedded to have forward compatible implementations.
type UnimplementedShapeServer struct {
}

func (UnimplementedShapeServer) TrianglePerimeter(context.Context, *TrianglePerimeterRequest) (*TrianglePerimeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrianglePerimeter not implemented")
}
func (UnimplementedShapeServer) mustEmbedUnimplementedShapeServer() {}

// UnsafeShapeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShapeServer will
// result in compilation errors.
type UnsafeShapeServer interface {
	mustEmbedUnimplementedShapeServer()
}

func RegisterShapeServer(s grpc.ServiceRegistrar, srv ShapeServer) {
	s.RegisterService(&Shape_ServiceDesc, srv)
}

func _Shape_TrianglePerimeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrianglePerimeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShapeServer).TrianglePerimeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shape.v1.Shape/TrianglePerimeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShapeServer).TrianglePerimeter(ctx, req.(*TrianglePerimeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shape_ServiceDesc is the grpc.ServiceDesc for Shape service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shape_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shape.v1.Shape",
	HandlerType: (*ShapeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrianglePerimeter",
			Handler:    _Shape_TrianglePerimeter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shape/v1/shape.proto",
}
